{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeBody","map","body","i","style","left","top","className","key","getRandom","Math","floor","random","initialState","direction","speed","food","points","App","state","handleKey","e","window","event","keyCode","setState","moveSnake","head","length","push","shift","outOfBounds","gameOver","checkIfEat","increaseSpeed","enlargeSnake","increasePoints","newSnakeBody","unshift","checkIfCollapsed","snake","pop","forEach","updatePoints","document","getElementById","maxStoredPoints","localStorage","getItem","setItem","innerText","alert","setInterval","this","onkeydown","Snake","Food","id","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c50e864.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeBody.map((body, i) => {\r\n                const style = {\r\n                    left: `${body[0]}%`,\r\n                    top: `${body[1]}%`\r\n                }\r\n                return(\r\n                    <div className=\"snake\" key={i} style={style}></div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default (props) => {\r\n    const style = {\r\n        left: `${props.body[0]}%`,\r\n        top: `${props.body[1]}%`\r\n    }\r\n\r\n    return (\r\n        <div className=\"snake-food\" style={style}></div>\r\n    )\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Snake from './Snake'\nimport Food from './Food'\n\nconst getRandom = () => {\n  let min = 1\n  let max = 98\n  let x = Math.floor((Math.random() * (max-min+1)+min)/3)*3\n  let y = Math.floor((Math.random() * (max-min+1)+min)/3)*3\n  return [x,y]\n}\n\nconst initialState = {\n  direction: 'right',\n    speed: 200,\n    food: getRandom(),\n    points: 0,\n    snakeBody: [\n      [0,0],\n      [3, 0]\n    ]\n}\n\nclass App extends Component {\n\n  state = initialState\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed)\n    document.onkeydown = this.handleKey\n  }\n\n  componentDidUpdate() {\n    this.outOfBounds()\n    this.checkIfCollapsed()\n    this.checkIfEat()\n    this.updatePoints()\n  }\n\n  handleKey = e => {\n    e = e || window.event\n    switch(e.keyCode) {\n      case 38:\n        this.setState({direction: 'up'})\n        break;\n      case 40:\n        this.setState({direction:'down'})\n        break;\n      case 37: \n        this.setState({direction:'left'})\n        break;\n      case 39:\n        this.setState({direction:'right'})\n        break;\n      default:\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let body = [...this.state.snakeBody]\n    let head = body[body.length - 1]\n\n    switch(this.state.direction) {\n      case 'right':\n        head = [head[0] + 3, head[1]]\n        break\n      case 'left':\n        head = [head[0] - 3, head[1]]\n        break\n      case 'down':\n        head = [head[0], head[1] + 3]\n        break\n      case 'up':\n        head = [head[0], head[1] - 3]\n        break\n      default:\n        break\n    }\n    body.push(head)\n    body.shift()\n    this.setState({\n      snakeBody: body\n    })\n  }\n\n  outOfBounds = () => {\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1]\n    if (head[0] >= 99 || head[1] >= 99 || head[0] < 0 || head[1] < 0) {\n      this.gameOver()\n    }\n  }\n\n  checkIfEat = () => {\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1]\n    let food = this.state.food\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandom()\n      })\n      this.increaseSpeed()\n      this.enlargeSnake()\n      this.increasePoints()\n    }\n  }\n\n  enlargeSnake = () => {\n    let newSnakeBody = [...this.state.snakeBody]\n    newSnakeBody.unshift([])\n    this.setState({\n      snakeBody: newSnakeBody\n    })\n  }\n\n  increaseSpeed = () => {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  checkIfCollapsed = () => {\n    let snake = [...this.state.snakeBody]\n    let head = snake[snake.length - 1]\n    snake.pop()\n    snake.forEach(body => {\n      if (head[0] === body[0] && head[1] === body[1]) {\n        this.gameOver()\n      }\n    })\n  }\n\n  updatePoints = () => {\n    let points = document.getElementById('points')\n    let maxStoredPoints = localStorage.getItem(\"maxStoredPoints\");\n    if (!maxStoredPoints || this.state.points > maxStoredPoints) {\n      localStorage.setItem(\"maxStoredPoints\", this.state.points)\n    }\n    let maxPoint = document.getElementById('maxPoint')\n    maxPoint.innerText = `Max Points: ${maxStoredPoints}`\n    points.innerText = `Points: ${this.state.points}`\n  }\n\n  increasePoints = () => {\n    this.setState({\n      points: this.state.points + 1\n    })\n  }\n\n  gameOver = () => {\n    alert(`Game Over`)\n    this.setState(initialState)\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n         <div className=\"game-grid\">\n            <Snake snakeBody={this.state.snakeBody}/>\n            <Food body={this.state.food}/>\n        </div>\n        <div className=\"chart\">\n          <h2 id=\"points\">Points: 0</h2>\n          <h2 id=\"maxPoint\">Max Points: 0</h2>  \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}